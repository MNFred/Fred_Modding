// Decompiled with JetBrains decompiler
// Type: Fred.Jack_Copper.Artifacts.ArtifactToyKnife
// Assembly: JaCk, Version=2.3.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 643006C4-753C-4ED5-B46E-8601983E834D
// Assembly location: C:\Users\Admin\Downloads\Jack-34-2-3-4-1741629057\JaCk\JaCk.dll

using Nanoray.PluginManager;
using Nickel;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;

#nullable enable
namespace Fred.Jack_Copper.Artifacts
{
  public class ArtifactToyKnife : Artifact, IDuoArtifact
  {
    public static void Register(IPluginPackage<IModManifest> package, IModHelper helper)
    {
      IDuoArtifactsApi duoArtifactsApi = ModEntry.Instance.DuoArtifactsApi;
      if (duoArtifactsApi == null || ModEntry.Instance.tyAndSashaApi == null)
        return;
      IModArtifacts artifacts = helper.Content.Artifacts;
      ArtifactConfiguration artifactConfiguration1 = new ArtifactConfiguration();
      ((ArtifactConfiguration) ref artifactConfiguration1).ArtifactType = MethodBase.GetCurrentMethod().DeclaringType;
      ((ArtifactConfiguration) ref artifactConfiguration1).Meta = new ArtifactMeta()
      {
        owner = duoArtifactsApi.DuoArtifactVanillaDeck,
        pools = new ArtifactPool[1]
      };
      ((ArtifactConfiguration) ref artifactConfiguration1).Sprite = helper.Content.Sprites.RegisterSprite(ModEntry.Instance.Package.PackageRoot.GetRelativeFile("assets/artifacts/duo_jack_tysasha.png")).Sprite;
      ref ArtifactConfiguration local1 = ref artifactConfiguration1;
      IKeyAndTokensBoundLocalizationProvider localizationProvider1 = ILocalizationProviderExt.Bind<IReadOnlyList<string>>(ModEntry.Instance.AnyLocalizations, (IReadOnlyList<string>) new \u003C\u003Ez__ReadOnlyArray<string>(new string[3]
      {
        "artifact",
        "ToyKnife",
        "name"
      }), (object) null);
      // ISSUE: virtual method pointer
      SingleLocalizationProvider localizationProvider2 = new SingleLocalizationProvider((object) localizationProvider1, __vmethodptr(localizationProvider1, Localize));
      ((ArtifactConfiguration) ref local1).Name = localizationProvider2;
      ref ArtifactConfiguration local2 = ref artifactConfiguration1;
      IKeyAndTokensBoundLocalizationProvider localizationProvider3 = ILocalizationProviderExt.Bind<IReadOnlyList<string>>(ModEntry.Instance.AnyLocalizations, (IReadOnlyList<string>) new \u003C\u003Ez__ReadOnlyArray<string>(new string[3]
      {
        "artifact",
        "ToyKnife",
        "description"
      }), (object) null);
      // ISSUE: virtual method pointer
      SingleLocalizationProvider localizationProvider4 = new SingleLocalizationProvider((object) localizationProvider3, __vmethodptr(localizationProvider3, Localize));
      ((ArtifactConfiguration) ref local2).Description = localizationProvider4;
      ArtifactConfiguration artifactConfiguration2 = artifactConfiguration1;
      artifacts.RegisterArtifact("ToyKnife", artifactConfiguration2);
      duoArtifactsApi.RegisterDuoArtifact(MethodBase.GetCurrentMethod().DeclaringType, (IEnumerable<Deck>) new \u003C\u003Ez__ReadOnlyArray<Deck>(new Deck[2]
      {
        ModEntry.Instance.JackCopper_Deck.Deck,
        ModEntry.Instance.tyAndSashaApi.TyDeck
      }));
    }

    public override void OnTurnStart(State state, Combat combat)
    {
      combat.Queue((CardAction) new SpawnWilding());
    }

    public override List<Tooltip>? GetExtraTooltips()
    {
      Tooltip tooltip = (Tooltip) new TTGlossary("action.spawn", Array.Empty<object>());
      CardTraitConfiguration configuration = ModEntry.Instance.tyAndSashaApi.WildTrait.Configuration;
      List<Tooltip> list1 = ((CardTraitConfiguration) ref configuration).Tooltips(DB.fakeState, (Card) null).ToList<Tooltip>();
      List<Tooltip> list2 = new List<Tooltip>();
      CollectionsMarshal.SetCount<Tooltip>(list2, 1 + list1.Count);
      Span<Tooltip> span1 = CollectionsMarshal.AsSpan<Tooltip>(list2);
      int index = 0;
      span1[index] = tooltip;
      int start = index + 1;
      Span<Tooltip> span2 = CollectionsMarshal.AsSpan<Tooltip>(list1);
      span2.CopyTo(span1.Slice(start, span2.Length));
      int num = start + span2.Length;
      return list2;
    }

    public override void OnCombatStart(State state, Combat combat)
    {
      combat.Queue((CardAction) new SpawnWilding());
    }

    public override void OnPlayerRecieveCardMidCombat(State state, Combat combat, Card card)
    {
      foreach (CardAction action in card.GetActions(state, combat))
      {
        if (action is ASpawn)
        {
          ModEntry.Instance.Helper.Content.Cards.SetCardTraitOverride(state, card, ModEntry.Instance.tyAndSashaApi.WildTrait, new bool?(true), false);
          break;
        }
      }
    }
  }
}
